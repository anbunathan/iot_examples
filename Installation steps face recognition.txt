https://www.pyimagesearch.com/2018/06/18/face-recognition-with-opencv-python-and-deep-learning/
D:\workshop\Machine Learning\facerecognition\face-recognition-opencv
Step1: Install OpenCV and other SW
pip install opencv-contrib-python --upgrade
>>python
>>import cv2
>>print(cv2.__version__)
Ans:4.1.0

pip install imutils
pip install --upgrade imutils

pip install cmake
pip install dlib
pip install face_recognition
pip install requests

Step2: Create Encodings (This step can be skipped as it takes more time to encode one image)
Copy encode_faces.py from face-recognition-opencv.zip
Copy dataset folder from face-recognition-opencv.zip file to project path (with 218 images)
Select detection method as "cnn"
Select encodings file as "encodings.pickle"
Execute encode_faces.py
It will create an encodings file known as "encodings.pickle"

Step3: Recognize faces from Image
Load encodings from "encodings.pickle" file
Load an Image from "examples/example_01.png"
Select detection methos as "cnn"
Copy recognize_faces_image.py from face-recognition-opencv.zip and execute
Now faces are recognized and labelled
python recognize_faces_image.py --encodings encodings.pickle --image examples/example_01.png
Video
# python recognize_faces_video.py --encodings encodings.pickle
# python recognize_faces_video.py --encodings encodings.pickle --output output/jurassic_park_trailer_output.avi --display 0

Source code
face-recognition-opencv.zip
http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiNDc2ODQyOSIsImRlbGl2ZXJ5X2lkIjoiNjU3OTEzNDEzNSIsInVybCI6Imh0dHA6Ly9weWltZy5jby92Z2dqbz9fX3M9cnhqeGVjMThzcWFzZHpmM3Z6aHkifQ
DL4CVStarterBundle
https://github.com/Abhs9/DL4CVStarterBundle

Create Data (Skip this step)
pip install requests
https://www.pyimagesearch.com/2018/04/09/how-to-quickly-build-a-deep-learning-image-dataset/
copy search_bing_api.py from face-recognition-opencv.zip file
Run search_bing_api.py to create a dataset

-------------------------------------------------------------------------------
recognize_faces_image.py
# USAGE
# python recognize_faces_image.py --encodings encodings.pickle --image examples/example_01.png 

# import the necessary packages
import face_recognition
import argparse
import pickle
import cv2
import datetime

starttime = datetime.datetime.now()
# load the known faces and embeddings
print("[INFO] loading encodings...")
#data = pickle.loads(open(args["encodings"], "rb").read())
data = pickle.loads(open("encodings.pickle", "rb").read())

# load the input image and convert it from BGR to RGB
#image = cv2.imread(args["image"])
image = cv2.imread("examples/example_01.png")

rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# detect the (x, y)-coordinates of the bounding boxes corresponding
# to each face in the input image, then compute the facial embeddings
# for each face
print("[INFO] recognizing faces...")
boxes = face_recognition.face_locations(rgb,
	#model=args["detection_method"])
	model="cnn")
encodings = face_recognition.face_encodings(rgb, boxes)

# initialize the list of names for each face detected
names = []

# loop over the facial embeddings
for encoding in encodings:
	# attempt to match each face in the input image to our known
	# encodings
	matches = face_recognition.compare_faces(data["encodings"],
		encoding)
	name = "Unknown"

	# check to see if we have found a match
	if True in matches:
		# find the indexes of all matched faces then initialize a
		# dictionary to count the total number of times each face
		# was matched
		matchedIdxs = [i for (i, b) in enumerate(matches) if b]
		counts = {}

		# loop over the matched indexes and maintain a count for
		# each recognized face face
		for i in matchedIdxs:
			name = data["names"][i]
			counts[name] = counts.get(name, 0) + 1

		# determine the recognized face with the largest number of
		# votes (note: in the event of an unlikely tie Python will
		# select first entry in the dictionary)
		name = max(counts, key=counts.get)
	
	# update the list of names
	names.append(name)

# loop over the recognized faces
for ((top, right, bottom, left), name) in zip(boxes, names):
	# draw the predicted face name on the image
	cv2.rectangle(image, (left, top), (right, bottom), (0, 255, 0), 2)
	y = top - 15 if top - 15 > 15 else top + 15
	cv2.putText(image, name, (left, y), cv2.FONT_HERSHEY_SIMPLEX,
		0.75, (0, 255, 0), 2)

# show the output image
cv2.imshow("Image", image)
cv2.waitKey(0)
endtime = datetime.datetime.now()
elapsedtime = endtime - starttime
print("starttime = ", starttime)
print("endtime = ", endtime)
print("elapsedtime = ", elapsedtime)
---------------------------------------------------------------------------------